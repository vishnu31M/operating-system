#include <stdio.h>
#include <stdlib.h>
#include <semaphore.h>
#include <pthread.h>

sem_t mutex, write_mutex;
int read_count = 0;
int shared_data = 0;

void* reader(void* arg) {
    int id = (int)arg;

    sem_wait(&mutex);
    read_count++;
    if (read_count == 1) {
        sem_wait(&write_mutex);
    }
    sem_post(&mutex);

    printf("Reader %d: read shared_data = %d\n", id, shared_data);

    sem_wait(&mutex);
    read_count--;
    if (read_count == 0) {
        sem_post(&write_mutex);
    }
    sem_post(&mutex);

    return NULL;
}

void* writer(void* arg) {
    int id = (int)arg;

    sem_wait(&write_mutex);
    shared_data++;
    printf("Writer %d: wrote shared_data = %d\n", id, shared_data);
    sem_post(&write_mutex);

    return NULL;
}

int main() {
    pthread_t readers[5], writers[2];
    int reader_ids[5] = {1, 2, 3, 4, 5};
    int writer_ids[2] = {1, 2};

    sem_init(&mutex, 0, 1);
    sem_init(&write_mutex, 0, 1);

    for (int i = 0; i < 5; i++) {
        pthread_create(&readers[i], NULL, reader, &reader_ids[i]);
    }

    for (int i = 0; i < 2; i++) {
        pthread_create(&writers[i], NULL, writer, &writer_ids[i]);
    }

    for (int i = 0; i < 5; i++) {
        pthread_join(readers[i], NULL);
    }

    for (int i = 0; i < 2; i++) {
        pthread_join(writers[i], NULL);
    }

    sem_destroy(&mutex);
    sem_destroy(&write_mutex);

    return 0;

}
OUTPUT:
Reader 1: read shared_data = 0
Reader 2: read shared_data = 0
Reader 3: read shared_data = 0
Writer 1: wrote shared_data = 1
Reader 4: read shared_data = 1
Reader 5: read shared_data = 1
Writer 2: wrote shared_data = 2
